Nonterminals useless in grammar

    Primary
    UnaryOp
    BinaryOp


Terminals unused in grammar

    TYPE
    LOGICALAND
    LOGICALOR
    WRITE
    IF
    WHILE


Rules useless in grammar

   52 Primary: ID
   53        | NUMBER
   54        | LEFTPARENTHESIS Expr RIGHTPARENTHESIS
   55        | ID LEFTBRACKET Expr RIGHTBRACKET

   56 UnaryOp: MINUS
   57        | UNARYNOT

   58 BinaryOp: PLUS
   59         | MINUS
   60         | MULTIPLY
   61         | DIVIDE
   62         | LOGICALAND
   63         | LOGICALOR


Rules useless in parser due to conflicts

   27 FunCall: ε


State 0 conflicts: 13 shift/reduce, 1 reduce/reduce
State 16 conflicts: 13 shift/reduce, 9 reduce/reduce
State 18 conflicts: 6 shift/reduce, 1 reduce/reduce
State 50 conflicts: 10 shift/reduce
State 59 conflicts: 6 shift/reduce
State 60 conflicts: 6 shift/reduce
State 61 conflicts: 6 shift/reduce
State 62 conflicts: 6 shift/reduce
State 63 conflicts: 10 shift/reduce
State 64 conflicts: 10 shift/reduce
State 65 conflicts: 10 shift/reduce
State 66 conflicts: 10 shift/reduce
State 67 conflicts: 10 shift/reduce
State 68 conflicts: 10 shift/reduce
State 81 conflicts: 10 shift/reduce
State 90 conflicts: 13 shift/reduce, 1 reduce/reduce
State 92 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl

    4 Decl: FunDecl
    5     | VarDecl
    6     | StmtList

    7 StmtList: ε
    8         | Stmt StmtList

    9 Stmt: SEMICOLON
   10     | Expr SEMICOLON
   11     | ReturnStmt SEMICOLON
   12     | FunCall SEMICOLON

   13 Type: INT
   14     | FLOAT
   15     | BOOL
   16     | CHAR
   17     | STRING
   18     | VOID

   19 ParamList: ε
   20          | Type ID COMMA ParamList
   21          | Type ID

   22 Param: Type ID COMMA Param
   23      | Type ID
   24      | ε

   25 ReturnStmt: RETURN Expr

   26 FunCall: ID LEFTPARENTHESIS Param RIGHTPARENTHESIS
   27        | ε

   28 $@1: ε

   29 $@2: ε

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

   31 Block: LEFTCURLYBRACKET DeclList StmtList RIGHCURLYBRACKET

   32 VarDecl: Type ID SEMICOLON
   33        | Type ID EQUAL Expr SEMICOLON
   34        | Type ID LEFTBRACKET Expr RIGHTBRACKET SEMICOLON

   35 Expr: NUMBER
   36     | MINUS NUMBER
   37     | ID
   38     | LEFTPARENTHESIS Expr RIGHTPARENTHESIS
   39     | ID LEFTBRACKET Expr RIGHTBRACKET
   40     | ID EQUAL Expr
   41     | ID LEFTBRACKET Expr RIGHTBRACKET EQUAL Expr
   42     | Expr PLUS Expr
   43     | Expr MINUS Expr
   44     | Expr MULTIPLY Expr
   45     | Expr DIVIDE Expr
   46     | Expr EQUAL_TO Expr
   47     | Expr NOT_EQUAL_TO Expr
   48     | Expr LESS_THAN Expr
   49     | Expr LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr GREATER_THAN Expr
   51     | Expr GREATER_THAN_OR_EQUAL_TO Expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258)
    INT <string> (259) 13
    FLOAT <string> (260) 14
    CHAR <string> (261) 16
    BOOL <string> (262) 15
    STRING <string> (263) 17
    VOID <string> (264) 18
    ID <string> (265) 20 21 22 23 26 30 32 33 34 37 39 40 41
    RETURN <string> (266) 25
    SEMICOLON <character> (267) 9 10 11 12 32 33 34
    COMMA <character> (268) 20 22
    EQUAL <character> (269) 33 40 41
    PLUS <character> (270) 42
    MINUS <character> (271) 36 43
    MULTIPLY <character> (272) 44
    DIVIDE <character> (273) 45
    LEFTPARENTHESIS <character> (274) 26 30 38
    RIGHTPARENTHESIS <character> (275) 26 30 38
    LEFTCURLYBRACKET <character> (276) 31
    RIGHCURLYBRACKET <character> (277) 31
    LEFTBRACKET <character> (278) 34 39 41
    RIGHTBRACKET <character> (279) 34 39 41
    UNARYNOT <character> (280)
    LOGICALAND <string> (281)
    LOGICALOR <string> (282)
    NUMBER <string> (283) 35 36
    WRITE <string> (284)
    FUN <string> (285) 30
    IF <string> (286)
    WHILE <string> (287)
    LESS_THAN <string> (288) 48
    GREATER_THAN <string> (289) 50
    LESS_THAN_OR_EQUAL_TO <string> (290) 49
    GREATER_THAN_OR_EQUAL_TO <string> (291) 51
    EQUAL_TO <string> (292) 46
    NOT_EQUAL_TO <string> (293) 47


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    Program <ast> (40)
        on left: 1
        on right: 0
    DeclList <ast> (41)
        on left: 2 3
        on right: 1 2 31
    Decl <ast> (42)
        on left: 4 5 6
        on right: 2 3
    StmtList <ast> (43)
        on left: 7 8
        on right: 6 8 31
    Stmt <ast> (44)
        on left: 9 10 11 12
        on right: 8
    Type <ast> (45)
        on left: 13 14 15 16 17 18
        on right: 20 21 22 23 30 32 33 34
    ParamList <ast> (46)
        on left: 19 20 21
        on right: 20 30
    Param <ast> (47)
        on left: 22 23 24
        on right: 22 26
    ReturnStmt (48)
        on left: 25
        on right: 11
    FunCall (49)
        on left: 26 27
        on right: 12
    FunDecl <ast> (50)
        on left: 30
        on right: 4
    $@1 (51)
        on left: 28
        on right: 30
    $@2 (52)
        on left: 29
        on right: 30
    Block <ast> (53)
        on left: 31
        on right: 30
    VarDecl <ast> (54)
        on left: 32 33 34
        on right: 5
    Expr <ast> (55)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
        on right: 10 25 33 34 38 39 40 41 42 43 44 45 46 47 48 49 50 51


State 0

    0 $accept: • Program $end

    INT              shift, and go to state 1
    FLOAT            shift, and go to state 2
    CHAR             shift, and go to state 3
    BOOL             shift, and go to state 4
    STRING           shift, and go to state 5
    VOID             shift, and go to state 6
    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12
    FUN              shift, and go to state 13

    INT              [reduce using rule 7 (StmtList)]
    FLOAT            [reduce using rule 7 (StmtList)]
    CHAR             [reduce using rule 7 (StmtList)]
    BOOL             [reduce using rule 7 (StmtList)]
    STRING           [reduce using rule 7 (StmtList)]
    VOID             [reduce using rule 7 (StmtList)]
    ID               [reduce using rule 7 (StmtList)]
    RETURN           [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 27 (FunCall)]
    MINUS            [reduce using rule 7 (StmtList)]
    LEFTPARENTHESIS  [reduce using rule 7 (StmtList)]
    NUMBER           [reduce using rule 7 (StmtList)]
    FUN              [reduce using rule 7 (StmtList)]
    $default         reduce using rule 7 (StmtList)

    Program     go to state 14
    DeclList    go to state 15
    Decl        go to state 16
    StmtList    go to state 17
    Stmt        go to state 18
    Type        go to state 19
    ReturnStmt  go to state 20
    FunCall     go to state 21
    FunDecl     go to state 22
    VarDecl     go to state 23
    Expr        go to state 24


State 1

   13 Type: INT •

    $default  reduce using rule 13 (Type)


State 2

   14 Type: FLOAT •

    $default  reduce using rule 14 (Type)


State 3

   16 Type: CHAR •

    $default  reduce using rule 16 (Type)


State 4

   15 Type: BOOL •

    $default  reduce using rule 15 (Type)


State 5

   17 Type: STRING •

    $default  reduce using rule 17 (Type)


State 6

   18 Type: VOID •

    $default  reduce using rule 18 (Type)


State 7

   26 FunCall: ID • LEFTPARENTHESIS Param RIGHTPARENTHESIS
   37 Expr: ID •
   39     | ID • LEFTBRACKET Expr RIGHTBRACKET
   40     | ID • EQUAL Expr
   41     | ID • LEFTBRACKET Expr RIGHTBRACKET EQUAL Expr

    EQUAL            shift, and go to state 25
    LEFTPARENTHESIS  shift, and go to state 26
    LEFTBRACKET      shift, and go to state 27

    $default  reduce using rule 37 (Expr)


State 8

   25 ReturnStmt: RETURN • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 29


State 9

    9 Stmt: SEMICOLON •

    $default  reduce using rule 9 (Stmt)


State 10

   36 Expr: MINUS • NUMBER

    NUMBER  shift, and go to state 30


State 11

   38 Expr: LEFTPARENTHESIS • Expr RIGHTPARENTHESIS

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 31


State 12

   35 Expr: NUMBER •

    $default  reduce using rule 35 (Expr)


State 13

   30 FunDecl: FUN • Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    Type  go to state 32


State 14

    0 $accept: Program • $end

    $end  shift, and go to state 33


State 15

    1 Program: DeclList •

    $default  reduce using rule 1 (Program)


State 16

    2 DeclList: Decl • DeclList
    3         | Decl •

    INT              shift, and go to state 1
    FLOAT            shift, and go to state 2
    CHAR             shift, and go to state 3
    BOOL             shift, and go to state 4
    STRING           shift, and go to state 5
    VOID             shift, and go to state 6
    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12
    FUN              shift, and go to state 13

    $end              reduce using rule 3 (DeclList)
    $end              [reduce using rule 7 (StmtList)]
    INT               [reduce using rule 7 (StmtList)]
    FLOAT             [reduce using rule 7 (StmtList)]
    CHAR              [reduce using rule 7 (StmtList)]
    BOOL              [reduce using rule 7 (StmtList)]
    STRING            [reduce using rule 7 (StmtList)]
    VOID              [reduce using rule 7 (StmtList)]
    ID                [reduce using rule 3 (DeclList)]
    ID                [reduce using rule 7 (StmtList)]
    RETURN            [reduce using rule 3 (DeclList)]
    RETURN            [reduce using rule 7 (StmtList)]
    SEMICOLON         [reduce using rule 3 (DeclList)]
    SEMICOLON         [reduce using rule 7 (StmtList)]
    SEMICOLON         [reduce using rule 27 (FunCall)]
    MINUS             [reduce using rule 3 (DeclList)]
    MINUS             [reduce using rule 7 (StmtList)]
    LEFTPARENTHESIS   [reduce using rule 3 (DeclList)]
    LEFTPARENTHESIS   [reduce using rule 7 (StmtList)]
    RIGHCURLYBRACKET  reduce using rule 3 (DeclList)
    RIGHCURLYBRACKET  [reduce using rule 7 (StmtList)]
    NUMBER            [reduce using rule 3 (DeclList)]
    NUMBER            [reduce using rule 7 (StmtList)]
    FUN               [reduce using rule 7 (StmtList)]
    $default          reduce using rule 3 (DeclList)

    DeclList    go to state 34
    Decl        go to state 16
    StmtList    go to state 17
    Stmt        go to state 18
    Type        go to state 19
    ReturnStmt  go to state 20
    FunCall     go to state 21
    FunDecl     go to state 22
    VarDecl     go to state 23
    Expr        go to state 24


State 17

    6 Decl: StmtList •

    $default  reduce using rule 6 (Decl)


State 18

    8 StmtList: Stmt • StmtList

    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    ID               [reduce using rule 7 (StmtList)]
    RETURN           [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 27 (FunCall)]
    MINUS            [reduce using rule 7 (StmtList)]
    LEFTPARENTHESIS  [reduce using rule 7 (StmtList)]
    NUMBER           [reduce using rule 7 (StmtList)]
    $default         reduce using rule 7 (StmtList)

    StmtList    go to state 35
    Stmt        go to state 18
    ReturnStmt  go to state 20
    FunCall     go to state 21
    Expr        go to state 24


State 19

   32 VarDecl: Type • ID SEMICOLON
   33        | Type • ID EQUAL Expr SEMICOLON
   34        | Type • ID LEFTBRACKET Expr RIGHTBRACKET SEMICOLON

    ID  shift, and go to state 36


State 20

   11 Stmt: ReturnStmt • SEMICOLON

    SEMICOLON  shift, and go to state 37


State 21

   12 Stmt: FunCall • SEMICOLON

    SEMICOLON  shift, and go to state 38


State 22

    4 Decl: FunDecl •

    $default  reduce using rule 4 (Decl)


State 23

    5 Decl: VarDecl •

    $default  reduce using rule 5 (Decl)


State 24

   10 Stmt: Expr • SEMICOLON
   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    SEMICOLON                 shift, and go to state 39
    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49


State 25

   40 Expr: ID EQUAL • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 50


State 26

   26 FunCall: ID LEFTPARENTHESIS • Param RIGHTPARENTHESIS

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    $default  reduce using rule 24 (Param)

    Type   go to state 51
    Param  go to state 52


State 27

   39 Expr: ID LEFTBRACKET • Expr RIGHTBRACKET
   41     | ID LEFTBRACKET • Expr RIGHTBRACKET EQUAL Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 53


State 28

   37 Expr: ID •
   39     | ID • LEFTBRACKET Expr RIGHTBRACKET
   40     | ID • EQUAL Expr
   41     | ID • LEFTBRACKET Expr RIGHTBRACKET EQUAL Expr

    EQUAL        shift, and go to state 25
    LEFTBRACKET  shift, and go to state 27

    $default  reduce using rule 37 (Expr)


State 29

   25 ReturnStmt: RETURN Expr •
   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    $default  reduce using rule 25 (ReturnStmt)


State 30

   36 Expr: MINUS NUMBER •

    $default  reduce using rule 36 (Expr)


State 31

   38 Expr: LEFTPARENTHESIS Expr • RIGHTPARENTHESIS
   42     | Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    RIGHTPARENTHESIS          shift, and go to state 54
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49


State 32

   30 FunDecl: FUN Type • ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

    ID  shift, and go to state 55


State 33

    0 $accept: Program $end •

    $default  accept


State 34

    2 DeclList: Decl DeclList •

    $default  reduce using rule 2 (DeclList)


State 35

    8 StmtList: Stmt StmtList •

    $default  reduce using rule 8 (StmtList)


State 36

   32 VarDecl: Type ID • SEMICOLON
   33        | Type ID • EQUAL Expr SEMICOLON
   34        | Type ID • LEFTBRACKET Expr RIGHTBRACKET SEMICOLON

    SEMICOLON    shift, and go to state 56
    EQUAL        shift, and go to state 57
    LEFTBRACKET  shift, and go to state 58


State 37

   11 Stmt: ReturnStmt SEMICOLON •

    $default  reduce using rule 11 (Stmt)


State 38

   12 Stmt: FunCall SEMICOLON •

    $default  reduce using rule 12 (Stmt)


State 39

   10 Stmt: Expr SEMICOLON •

    $default  reduce using rule 10 (Stmt)


State 40

   42 Expr: Expr PLUS • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 59


State 41

   43 Expr: Expr MINUS • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 60


State 42

   44 Expr: Expr MULTIPLY • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 61


State 43

   45 Expr: Expr DIVIDE • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 62


State 44

   48 Expr: Expr LESS_THAN • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 63


State 45

   50 Expr: Expr GREATER_THAN • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 64


State 46

   49 Expr: Expr LESS_THAN_OR_EQUAL_TO • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 65


State 47

   51 Expr: Expr GREATER_THAN_OR_EQUAL_TO • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 66


State 48

   46 Expr: Expr EQUAL_TO • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 67


State 49

   47 Expr: Expr NOT_EQUAL_TO • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 68


State 50

   40 Expr: ID EQUAL Expr •
   42     | Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    PLUS                      [reduce using rule 40 (Expr)]
    MINUS                     [reduce using rule 40 (Expr)]
    MULTIPLY                  [reduce using rule 40 (Expr)]
    DIVIDE                    [reduce using rule 40 (Expr)]
    LESS_THAN                 [reduce using rule 40 (Expr)]
    GREATER_THAN              [reduce using rule 40 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 40 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 40 (Expr)]
    EQUAL_TO                  [reduce using rule 40 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 40 (Expr)]
    $default                  reduce using rule 40 (Expr)


State 51

   22 Param: Type • ID COMMA Param
   23      | Type • ID

    ID  shift, and go to state 69


State 52

   26 FunCall: ID LEFTPARENTHESIS Param • RIGHTPARENTHESIS

    RIGHTPARENTHESIS  shift, and go to state 70


State 53

   39 Expr: ID LEFTBRACKET Expr • RIGHTBRACKET
   41     | ID LEFTBRACKET Expr • RIGHTBRACKET EQUAL Expr
   42     | Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    RIGHTBRACKET              shift, and go to state 71
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49


State 54

   38 Expr: LEFTPARENTHESIS Expr RIGHTPARENTHESIS •

    $default  reduce using rule 38 (Expr)


State 55

   30 FunDecl: FUN Type ID • $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

    $default  reduce using rule 28 ($@1)

    $@1  go to state 72


State 56

   32 VarDecl: Type ID SEMICOLON •

    $default  reduce using rule 32 (VarDecl)


State 57

   33 VarDecl: Type ID EQUAL • Expr SEMICOLON

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 73


State 58

   34 VarDecl: Type ID LEFTBRACKET • Expr RIGHTBRACKET SEMICOLON

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 74


State 59

   42 Expr: Expr • PLUS Expr
   42     | Expr PLUS Expr •
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    LESS_THAN                 [reduce using rule 42 (Expr)]
    GREATER_THAN              [reduce using rule 42 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 42 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 42 (Expr)]
    EQUAL_TO                  [reduce using rule 42 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 42 (Expr)]
    $default                  reduce using rule 42 (Expr)


State 60

   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   43     | Expr MINUS Expr •
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    LESS_THAN                 [reduce using rule 43 (Expr)]
    GREATER_THAN              [reduce using rule 43 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 43 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 43 (Expr)]
    EQUAL_TO                  [reduce using rule 43 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 43 (Expr)]
    $default                  reduce using rule 43 (Expr)


State 61

   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   44     | Expr MULTIPLY Expr •
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    LESS_THAN                 [reduce using rule 44 (Expr)]
    GREATER_THAN              [reduce using rule 44 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 44 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 44 (Expr)]
    EQUAL_TO                  [reduce using rule 44 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 44 (Expr)]
    $default                  reduce using rule 44 (Expr)


State 62

   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   45     | Expr DIVIDE Expr •
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    LESS_THAN                 [reduce using rule 45 (Expr)]
    GREATER_THAN              [reduce using rule 45 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 45 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 45 (Expr)]
    EQUAL_TO                  [reduce using rule 45 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 45 (Expr)]
    $default                  reduce using rule 45 (Expr)


State 63

   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   48     | Expr LESS_THAN Expr •
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    PLUS                      [reduce using rule 48 (Expr)]
    MINUS                     [reduce using rule 48 (Expr)]
    MULTIPLY                  [reduce using rule 48 (Expr)]
    DIVIDE                    [reduce using rule 48 (Expr)]
    LESS_THAN                 [reduce using rule 48 (Expr)]
    GREATER_THAN              [reduce using rule 48 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 48 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 48 (Expr)]
    EQUAL_TO                  [reduce using rule 48 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 48 (Expr)]
    $default                  reduce using rule 48 (Expr)


State 64

   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   50     | Expr GREATER_THAN Expr •
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    PLUS                      [reduce using rule 50 (Expr)]
    MINUS                     [reduce using rule 50 (Expr)]
    MULTIPLY                  [reduce using rule 50 (Expr)]
    DIVIDE                    [reduce using rule 50 (Expr)]
    LESS_THAN                 [reduce using rule 50 (Expr)]
    GREATER_THAN              [reduce using rule 50 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 50 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 50 (Expr)]
    EQUAL_TO                  [reduce using rule 50 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 50 (Expr)]
    $default                  reduce using rule 50 (Expr)


State 65

   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   49     | Expr LESS_THAN_OR_EQUAL_TO Expr •
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    PLUS                      [reduce using rule 49 (Expr)]
    MINUS                     [reduce using rule 49 (Expr)]
    MULTIPLY                  [reduce using rule 49 (Expr)]
    DIVIDE                    [reduce using rule 49 (Expr)]
    LESS_THAN                 [reduce using rule 49 (Expr)]
    GREATER_THAN              [reduce using rule 49 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 49 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 49 (Expr)]
    EQUAL_TO                  [reduce using rule 49 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 49 (Expr)]
    $default                  reduce using rule 49 (Expr)


State 66

   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr
   51     | Expr GREATER_THAN_OR_EQUAL_TO Expr •

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    PLUS                      [reduce using rule 51 (Expr)]
    MINUS                     [reduce using rule 51 (Expr)]
    MULTIPLY                  [reduce using rule 51 (Expr)]
    DIVIDE                    [reduce using rule 51 (Expr)]
    LESS_THAN                 [reduce using rule 51 (Expr)]
    GREATER_THAN              [reduce using rule 51 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 51 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 51 (Expr)]
    EQUAL_TO                  [reduce using rule 51 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 51 (Expr)]
    $default                  reduce using rule 51 (Expr)


State 67

   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   46     | Expr EQUAL_TO Expr •
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    PLUS                      [reduce using rule 46 (Expr)]
    MINUS                     [reduce using rule 46 (Expr)]
    MULTIPLY                  [reduce using rule 46 (Expr)]
    DIVIDE                    [reduce using rule 46 (Expr)]
    LESS_THAN                 [reduce using rule 46 (Expr)]
    GREATER_THAN              [reduce using rule 46 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 46 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 46 (Expr)]
    EQUAL_TO                  [reduce using rule 46 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 46 (Expr)]
    $default                  reduce using rule 46 (Expr)


State 68

   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   47     | Expr NOT_EQUAL_TO Expr •
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    PLUS                      [reduce using rule 47 (Expr)]
    MINUS                     [reduce using rule 47 (Expr)]
    MULTIPLY                  [reduce using rule 47 (Expr)]
    DIVIDE                    [reduce using rule 47 (Expr)]
    LESS_THAN                 [reduce using rule 47 (Expr)]
    GREATER_THAN              [reduce using rule 47 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 47 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 47 (Expr)]
    EQUAL_TO                  [reduce using rule 47 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 47 (Expr)]
    $default                  reduce using rule 47 (Expr)


State 69

   22 Param: Type ID • COMMA Param
   23      | Type ID •

    COMMA  shift, and go to state 75

    $default  reduce using rule 23 (Param)


State 70

   26 FunCall: ID LEFTPARENTHESIS Param RIGHTPARENTHESIS •

    $default  reduce using rule 26 (FunCall)


State 71

   39 Expr: ID LEFTBRACKET Expr RIGHTBRACKET •
   41     | ID LEFTBRACKET Expr RIGHTBRACKET • EQUAL Expr

    EQUAL  shift, and go to state 76

    $default  reduce using rule 39 (Expr)


State 72

   30 FunDecl: FUN Type ID $@1 • LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

    LEFTPARENTHESIS  shift, and go to state 77


State 73

   33 VarDecl: Type ID EQUAL Expr • SEMICOLON
   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    SEMICOLON                 shift, and go to state 78
    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49


State 74

   34 VarDecl: Type ID LEFTBRACKET Expr • RIGHTBRACKET SEMICOLON
   42 Expr: Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    RIGHTBRACKET              shift, and go to state 79
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49


State 75

   22 Param: Type ID COMMA • Param

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    $default  reduce using rule 24 (Param)

    Type   go to state 51
    Param  go to state 80


State 76

   41 Expr: ID LEFTBRACKET Expr RIGHTBRACKET EQUAL • Expr

    ID               shift, and go to state 28
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    Expr  go to state 81


State 77

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS • ParamList RIGHTPARENTHESIS $@2 Block

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    $default  reduce using rule 19 (ParamList)

    Type       go to state 82
    ParamList  go to state 83


State 78

   33 VarDecl: Type ID EQUAL Expr SEMICOLON •

    $default  reduce using rule 33 (VarDecl)


State 79

   34 VarDecl: Type ID LEFTBRACKET Expr RIGHTBRACKET • SEMICOLON

    SEMICOLON  shift, and go to state 84


State 80

   22 Param: Type ID COMMA Param •

    $default  reduce using rule 22 (Param)


State 81

   41 Expr: ID LEFTBRACKET Expr RIGHTBRACKET EQUAL Expr •
   42     | Expr • PLUS Expr
   43     | Expr • MINUS Expr
   44     | Expr • MULTIPLY Expr
   45     | Expr • DIVIDE Expr
   46     | Expr • EQUAL_TO Expr
   47     | Expr • NOT_EQUAL_TO Expr
   48     | Expr • LESS_THAN Expr
   49     | Expr • LESS_THAN_OR_EQUAL_TO Expr
   50     | Expr • GREATER_THAN Expr
   51     | Expr • GREATER_THAN_OR_EQUAL_TO Expr

    PLUS                      shift, and go to state 40
    MINUS                     shift, and go to state 41
    MULTIPLY                  shift, and go to state 42
    DIVIDE                    shift, and go to state 43
    LESS_THAN                 shift, and go to state 44
    GREATER_THAN              shift, and go to state 45
    LESS_THAN_OR_EQUAL_TO     shift, and go to state 46
    GREATER_THAN_OR_EQUAL_TO  shift, and go to state 47
    EQUAL_TO                  shift, and go to state 48
    NOT_EQUAL_TO              shift, and go to state 49

    PLUS                      [reduce using rule 41 (Expr)]
    MINUS                     [reduce using rule 41 (Expr)]
    MULTIPLY                  [reduce using rule 41 (Expr)]
    DIVIDE                    [reduce using rule 41 (Expr)]
    LESS_THAN                 [reduce using rule 41 (Expr)]
    GREATER_THAN              [reduce using rule 41 (Expr)]
    LESS_THAN_OR_EQUAL_TO     [reduce using rule 41 (Expr)]
    GREATER_THAN_OR_EQUAL_TO  [reduce using rule 41 (Expr)]
    EQUAL_TO                  [reduce using rule 41 (Expr)]
    NOT_EQUAL_TO              [reduce using rule 41 (Expr)]
    $default                  reduce using rule 41 (Expr)


State 82

   20 ParamList: Type • ID COMMA ParamList
   21          | Type • ID

    ID  shift, and go to state 85


State 83

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList • RIGHTPARENTHESIS $@2 Block

    RIGHTPARENTHESIS  shift, and go to state 86


State 84

   34 VarDecl: Type ID LEFTBRACKET Expr RIGHTBRACKET SEMICOLON •

    $default  reduce using rule 34 (VarDecl)


State 85

   20 ParamList: Type ID • COMMA ParamList
   21          | Type ID •

    COMMA  shift, and go to state 87

    $default  reduce using rule 21 (ParamList)


State 86

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS • $@2 Block

    $default  reduce using rule 29 ($@2)

    $@2  go to state 88


State 87

   20 ParamList: Type ID COMMA • ParamList

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    $default  reduce using rule 19 (ParamList)

    Type       go to state 82
    ParamList  go to state 89


State 88

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 • Block

    LEFTCURLYBRACKET  shift, and go to state 90

    Block  go to state 91


State 89

   20 ParamList: Type ID COMMA ParamList •

    $default  reduce using rule 20 (ParamList)


State 90

   31 Block: LEFTCURLYBRACKET • DeclList StmtList RIGHCURLYBRACKET

    INT              shift, and go to state 1
    FLOAT            shift, and go to state 2
    CHAR             shift, and go to state 3
    BOOL             shift, and go to state 4
    STRING           shift, and go to state 5
    VOID             shift, and go to state 6
    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12
    FUN              shift, and go to state 13

    INT              [reduce using rule 7 (StmtList)]
    FLOAT            [reduce using rule 7 (StmtList)]
    CHAR             [reduce using rule 7 (StmtList)]
    BOOL             [reduce using rule 7 (StmtList)]
    STRING           [reduce using rule 7 (StmtList)]
    VOID             [reduce using rule 7 (StmtList)]
    ID               [reduce using rule 7 (StmtList)]
    RETURN           [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 27 (FunCall)]
    MINUS            [reduce using rule 7 (StmtList)]
    LEFTPARENTHESIS  [reduce using rule 7 (StmtList)]
    NUMBER           [reduce using rule 7 (StmtList)]
    FUN              [reduce using rule 7 (StmtList)]
    $default         reduce using rule 7 (StmtList)

    DeclList    go to state 92
    Decl        go to state 16
    StmtList    go to state 17
    Stmt        go to state 18
    Type        go to state 19
    ReturnStmt  go to state 20
    FunCall     go to state 21
    FunDecl     go to state 22
    VarDecl     go to state 23
    Expr        go to state 24


State 91

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block •

    $default  reduce using rule 30 (FunDecl)


State 92

   31 Block: LEFTCURLYBRACKET DeclList • StmtList RIGHCURLYBRACKET

    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    MINUS            shift, and go to state 10
    LEFTPARENTHESIS  shift, and go to state 11
    NUMBER           shift, and go to state 12

    SEMICOLON  [reduce using rule 27 (FunCall)]
    $default   reduce using rule 7 (StmtList)

    StmtList    go to state 93
    Stmt        go to state 18
    ReturnStmt  go to state 20
    FunCall     go to state 21
    Expr        go to state 24


State 93

   31 Block: LEFTCURLYBRACKET DeclList StmtList • RIGHCURLYBRACKET

    RIGHCURLYBRACKET  shift, and go to state 94


State 94

   31 Block: LEFTCURLYBRACKET DeclList StmtList RIGHCURLYBRACKET •

    $default  reduce using rule 31 (Block)
