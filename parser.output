Nonterminals useless in grammar

    Primary
    UnaryOp
    BinaryOp


Terminals unused in grammar

    TYPE
    UNARYNOT
    LOGICALAND
    LOGICALOR
    WRITE
    IF
    WHILE
    LESS_THAN
    GREATER_THAN
    LESS_THAN_OR_EQUAL_TO
    GREATER_THAN_OR_EQUAL_TO
    EQUAL_TO
    NOT_EQUAL_TO


Rules useless in grammar

   45 Primary: ID
   46        | NUMBER
   47        | LEFTPARENTHESIS Expr RIGHTPARENTHESIS
   48        | ID LEFTBRACKET Expr RIGHTBRACKET

   49 UnaryOp: MINUS
   50        | UNARYNOT

   51 BinaryOp: PLUS
   52         | MINUS
   53         | MULTIPLY
   54         | DIVIDE
   55         | LOGICALAND
   56         | LOGICALOR


Rules useless in parser due to conflicts

   27 FunCall: ε


State 0 conflicts: 12 shift/reduce, 1 reduce/reduce
State 15 conflicts: 12 shift/reduce, 8 reduce/reduce
State 17 conflicts: 5 shift/reduce, 1 reduce/reduce
State 42 conflicts: 4 shift/reduce
State 67 conflicts: 4 shift/reduce
State 76 conflicts: 12 shift/reduce, 1 reduce/reduce
State 78 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: DeclList

    2 DeclList: Decl DeclList
    3         | Decl

    4 Decl: FunDecl
    5     | VarDecl
    6     | StmtList

    7 StmtList: ε
    8         | Stmt StmtList

    9 Stmt: SEMICOLON
   10     | Expr SEMICOLON
   11     | ReturnStmt SEMICOLON
   12     | FunCall SEMICOLON

   13 Type: INT
   14     | FLOAT
   15     | BOOL
   16     | CHAR
   17     | STRING
   18     | VOID

   19 ParamList: ε
   20          | Type ID COMMA ParamList
   21          | Type ID

   22 Param: Type ID COMMA Param
   23      | Type ID
   24      | ε

   25 ReturnStmt: RETURN Expr

   26 FunCall: ID LEFTPARENTHESIS Param RIGHTPARENTHESIS
   27        | ε

   28 $@1: ε

   29 $@2: ε

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

   31 Block: LEFTCURLYBRACKET DeclList StmtList RIGHCURLYBRACKET

   32 VarDecl: Type ID SEMICOLON
   33        | Type ID EQUAL Expr SEMICOLON
   34        | Type ID LEFTBRACKET Expr RIGHTBRACKET SEMICOLON

   35 Expr: NUMBER
   36     | ID
   37     | ID LEFTBRACKET Expr RIGHTBRACKET
   38     | ID EQUAL Expr
   39     | ID LEFTBRACKET Expr RIGHTBRACKET EQUAL Expr
   40     | Expr PLUS Expr
   41     | Expr MINUS Expr
   42     | Expr MULTIPLY Expr
   43     | Expr DIVIDE Expr
   44     | LEFTPARENTHESIS Expr RIGHTPARENTHESIS


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <string> (258)
    INT <string> (259) 13
    FLOAT <string> (260) 14
    CHAR <string> (261) 16
    BOOL <string> (262) 15
    STRING <string> (263) 17
    VOID <string> (264) 18
    ID <string> (265) 20 21 22 23 26 30 32 33 34 36 37 38 39
    RETURN <string> (266) 25
    SEMICOLON <character> (267) 9 10 11 12 32 33 34
    COMMA <character> (268) 20 22
    EQUAL <character> (269) 33 38 39
    PLUS <character> (270) 40
    MINUS <character> (271) 41
    MULTIPLY <character> (272) 42
    DIVIDE <character> (273) 43
    LEFTPARENTHESIS <character> (274) 26 30 44
    RIGHTPARENTHESIS <character> (275) 26 30 44
    LEFTCURLYBRACKET <character> (276) 31
    RIGHCURLYBRACKET <character> (277) 31
    LEFTBRACKET <character> (278) 34 37 39
    RIGHTBRACKET <character> (279) 34 37 39
    UNARYNOT <character> (280)
    LOGICALAND <string> (281)
    LOGICALOR <string> (282)
    NUMBER <string> (283) 35
    WRITE <string> (284)
    FUN <string> (285) 30
    IF <string> (286)
    WHILE <string> (287)
    LESS_THAN <string> (288)
    GREATER_THAN <string> (289)
    LESS_THAN_OR_EQUAL_TO <string> (290)
    GREATER_THAN_OR_EQUAL_TO <string> (291)
    EQUAL_TO <string> (292)
    NOT_EQUAL_TO <string> (293)


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    Program <ast> (40)
        on left: 1
        on right: 0
    DeclList <ast> (41)
        on left: 2 3
        on right: 1 2 31
    Decl <ast> (42)
        on left: 4 5 6
        on right: 2 3
    StmtList <ast> (43)
        on left: 7 8
        on right: 6 8 31
    Stmt <ast> (44)
        on left: 9 10 11 12
        on right: 8
    Type <ast> (45)
        on left: 13 14 15 16 17 18
        on right: 20 21 22 23 30 32 33 34
    ParamList <ast> (46)
        on left: 19 20 21
        on right: 20 30
    Param <ast> (47)
        on left: 22 23 24
        on right: 22 26
    ReturnStmt (48)
        on left: 25
        on right: 11
    FunCall (49)
        on left: 26 27
        on right: 12
    FunDecl <ast> (50)
        on left: 30
        on right: 4
    $@1 (51)
        on left: 28
        on right: 30
    $@2 (52)
        on left: 29
        on right: 30
    Block <ast> (53)
        on left: 31
        on right: 30
    VarDecl <ast> (54)
        on left: 32 33 34
        on right: 5
    Expr <ast> (55)
        on left: 35 36 37 38 39 40 41 42 43 44
        on right: 10 25 33 34 37 38 39 40 41 42 43 44


State 0

    0 $accept: • Program $end

    INT              shift, and go to state 1
    FLOAT            shift, and go to state 2
    CHAR             shift, and go to state 3
    BOOL             shift, and go to state 4
    STRING           shift, and go to state 5
    VOID             shift, and go to state 6
    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11
    FUN              shift, and go to state 12

    INT              [reduce using rule 7 (StmtList)]
    FLOAT            [reduce using rule 7 (StmtList)]
    CHAR             [reduce using rule 7 (StmtList)]
    BOOL             [reduce using rule 7 (StmtList)]
    STRING           [reduce using rule 7 (StmtList)]
    VOID             [reduce using rule 7 (StmtList)]
    ID               [reduce using rule 7 (StmtList)]
    RETURN           [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 27 (FunCall)]
    LEFTPARENTHESIS  [reduce using rule 7 (StmtList)]
    NUMBER           [reduce using rule 7 (StmtList)]
    FUN              [reduce using rule 7 (StmtList)]
    $default         reduce using rule 7 (StmtList)

    Program     go to state 13
    DeclList    go to state 14
    Decl        go to state 15
    StmtList    go to state 16
    Stmt        go to state 17
    Type        go to state 18
    ReturnStmt  go to state 19
    FunCall     go to state 20
    FunDecl     go to state 21
    VarDecl     go to state 22
    Expr        go to state 23


State 1

   13 Type: INT •

    $default  reduce using rule 13 (Type)


State 2

   14 Type: FLOAT •

    $default  reduce using rule 14 (Type)


State 3

   16 Type: CHAR •

    $default  reduce using rule 16 (Type)


State 4

   15 Type: BOOL •

    $default  reduce using rule 15 (Type)


State 5

   17 Type: STRING •

    $default  reduce using rule 17 (Type)


State 6

   18 Type: VOID •

    $default  reduce using rule 18 (Type)


State 7

   26 FunCall: ID • LEFTPARENTHESIS Param RIGHTPARENTHESIS
   36 Expr: ID •
   37     | ID • LEFTBRACKET Expr RIGHTBRACKET
   38     | ID • EQUAL Expr
   39     | ID • LEFTBRACKET Expr RIGHTBRACKET EQUAL Expr

    EQUAL            shift, and go to state 24
    LEFTPARENTHESIS  shift, and go to state 25
    LEFTBRACKET      shift, and go to state 26

    $default  reduce using rule 36 (Expr)


State 8

   25 ReturnStmt: RETURN • Expr

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 28


State 9

    9 Stmt: SEMICOLON •

    $default  reduce using rule 9 (Stmt)


State 10

   44 Expr: LEFTPARENTHESIS • Expr RIGHTPARENTHESIS

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 29


State 11

   35 Expr: NUMBER •

    $default  reduce using rule 35 (Expr)


State 12

   30 FunDecl: FUN • Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    Type  go to state 30


State 13

    0 $accept: Program • $end

    $end  shift, and go to state 31


State 14

    1 Program: DeclList •

    $default  reduce using rule 1 (Program)


State 15

    2 DeclList: Decl • DeclList
    3         | Decl •

    INT              shift, and go to state 1
    FLOAT            shift, and go to state 2
    CHAR             shift, and go to state 3
    BOOL             shift, and go to state 4
    STRING           shift, and go to state 5
    VOID             shift, and go to state 6
    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11
    FUN              shift, and go to state 12

    $end              reduce using rule 3 (DeclList)
    $end              [reduce using rule 7 (StmtList)]
    INT               [reduce using rule 7 (StmtList)]
    FLOAT             [reduce using rule 7 (StmtList)]
    CHAR              [reduce using rule 7 (StmtList)]
    BOOL              [reduce using rule 7 (StmtList)]
    STRING            [reduce using rule 7 (StmtList)]
    VOID              [reduce using rule 7 (StmtList)]
    ID                [reduce using rule 3 (DeclList)]
    ID                [reduce using rule 7 (StmtList)]
    RETURN            [reduce using rule 3 (DeclList)]
    RETURN            [reduce using rule 7 (StmtList)]
    SEMICOLON         [reduce using rule 3 (DeclList)]
    SEMICOLON         [reduce using rule 7 (StmtList)]
    SEMICOLON         [reduce using rule 27 (FunCall)]
    LEFTPARENTHESIS   [reduce using rule 3 (DeclList)]
    LEFTPARENTHESIS   [reduce using rule 7 (StmtList)]
    RIGHCURLYBRACKET  reduce using rule 3 (DeclList)
    RIGHCURLYBRACKET  [reduce using rule 7 (StmtList)]
    NUMBER            [reduce using rule 3 (DeclList)]
    NUMBER            [reduce using rule 7 (StmtList)]
    FUN               [reduce using rule 7 (StmtList)]
    $default          reduce using rule 3 (DeclList)

    DeclList    go to state 32
    Decl        go to state 15
    StmtList    go to state 16
    Stmt        go to state 17
    Type        go to state 18
    ReturnStmt  go to state 19
    FunCall     go to state 20
    FunDecl     go to state 21
    VarDecl     go to state 22
    Expr        go to state 23


State 16

    6 Decl: StmtList •

    $default  reduce using rule 6 (Decl)


State 17

    8 StmtList: Stmt • StmtList

    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    ID               [reduce using rule 7 (StmtList)]
    RETURN           [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 27 (FunCall)]
    LEFTPARENTHESIS  [reduce using rule 7 (StmtList)]
    NUMBER           [reduce using rule 7 (StmtList)]
    $default         reduce using rule 7 (StmtList)

    StmtList    go to state 33
    Stmt        go to state 17
    ReturnStmt  go to state 19
    FunCall     go to state 20
    Expr        go to state 23


State 18

   32 VarDecl: Type • ID SEMICOLON
   33        | Type • ID EQUAL Expr SEMICOLON
   34        | Type • ID LEFTBRACKET Expr RIGHTBRACKET SEMICOLON

    ID  shift, and go to state 34


State 19

   11 Stmt: ReturnStmt • SEMICOLON

    SEMICOLON  shift, and go to state 35


State 20

   12 Stmt: FunCall • SEMICOLON

    SEMICOLON  shift, and go to state 36


State 21

    4 Decl: FunDecl •

    $default  reduce using rule 4 (Decl)


State 22

    5 Decl: VarDecl •

    $default  reduce using rule 5 (Decl)


State 23

   10 Stmt: Expr • SEMICOLON
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr

    SEMICOLON  shift, and go to state 37
    PLUS       shift, and go to state 38
    MINUS      shift, and go to state 39
    MULTIPLY   shift, and go to state 40
    DIVIDE     shift, and go to state 41


State 24

   38 Expr: ID EQUAL • Expr

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 42


State 25

   26 FunCall: ID LEFTPARENTHESIS • Param RIGHTPARENTHESIS

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    $default  reduce using rule 24 (Param)

    Type   go to state 43
    Param  go to state 44


State 26

   37 Expr: ID LEFTBRACKET • Expr RIGHTBRACKET
   39     | ID LEFTBRACKET • Expr RIGHTBRACKET EQUAL Expr

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 45


State 27

   36 Expr: ID •
   37     | ID • LEFTBRACKET Expr RIGHTBRACKET
   38     | ID • EQUAL Expr
   39     | ID • LEFTBRACKET Expr RIGHTBRACKET EQUAL Expr

    EQUAL        shift, and go to state 24
    LEFTBRACKET  shift, and go to state 26

    $default  reduce using rule 36 (Expr)


State 28

   25 ReturnStmt: RETURN Expr •
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr

    PLUS      shift, and go to state 38
    MINUS     shift, and go to state 39
    MULTIPLY  shift, and go to state 40
    DIVIDE    shift, and go to state 41

    $default  reduce using rule 25 (ReturnStmt)


State 29

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   44     | LEFTPARENTHESIS Expr • RIGHTPARENTHESIS

    PLUS              shift, and go to state 38
    MINUS             shift, and go to state 39
    MULTIPLY          shift, and go to state 40
    DIVIDE            shift, and go to state 41
    RIGHTPARENTHESIS  shift, and go to state 46


State 30

   30 FunDecl: FUN Type • ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

    ID  shift, and go to state 47


State 31

    0 $accept: Program $end •

    $default  accept


State 32

    2 DeclList: Decl DeclList •

    $default  reduce using rule 2 (DeclList)


State 33

    8 StmtList: Stmt StmtList •

    $default  reduce using rule 8 (StmtList)


State 34

   32 VarDecl: Type ID • SEMICOLON
   33        | Type ID • EQUAL Expr SEMICOLON
   34        | Type ID • LEFTBRACKET Expr RIGHTBRACKET SEMICOLON

    SEMICOLON    shift, and go to state 48
    EQUAL        shift, and go to state 49
    LEFTBRACKET  shift, and go to state 50


State 35

   11 Stmt: ReturnStmt SEMICOLON •

    $default  reduce using rule 11 (Stmt)


State 36

   12 Stmt: FunCall SEMICOLON •

    $default  reduce using rule 12 (Stmt)


State 37

   10 Stmt: Expr SEMICOLON •

    $default  reduce using rule 10 (Stmt)


State 38

   40 Expr: Expr PLUS • Expr

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 51


State 39

   41 Expr: Expr MINUS • Expr

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 52


State 40

   42 Expr: Expr MULTIPLY • Expr

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 53


State 41

   43 Expr: Expr DIVIDE • Expr

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 54


State 42

   38 Expr: ID EQUAL Expr •
   40     | Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr

    PLUS      shift, and go to state 38
    MINUS     shift, and go to state 39
    MULTIPLY  shift, and go to state 40
    DIVIDE    shift, and go to state 41

    PLUS      [reduce using rule 38 (Expr)]
    MINUS     [reduce using rule 38 (Expr)]
    MULTIPLY  [reduce using rule 38 (Expr)]
    DIVIDE    [reduce using rule 38 (Expr)]
    $default  reduce using rule 38 (Expr)


State 43

   22 Param: Type • ID COMMA Param
   23      | Type • ID

    ID  shift, and go to state 55


State 44

   26 FunCall: ID LEFTPARENTHESIS Param • RIGHTPARENTHESIS

    RIGHTPARENTHESIS  shift, and go to state 56


State 45

   37 Expr: ID LEFTBRACKET Expr • RIGHTBRACKET
   39     | ID LEFTBRACKET Expr • RIGHTBRACKET EQUAL Expr
   40     | Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr

    PLUS          shift, and go to state 38
    MINUS         shift, and go to state 39
    MULTIPLY      shift, and go to state 40
    DIVIDE        shift, and go to state 41
    RIGHTBRACKET  shift, and go to state 57


State 46

   44 Expr: LEFTPARENTHESIS Expr RIGHTPARENTHESIS •

    $default  reduce using rule 44 (Expr)


State 47

   30 FunDecl: FUN Type ID • $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

    $default  reduce using rule 28 ($@1)

    $@1  go to state 58


State 48

   32 VarDecl: Type ID SEMICOLON •

    $default  reduce using rule 32 (VarDecl)


State 49

   33 VarDecl: Type ID EQUAL • Expr SEMICOLON

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 59


State 50

   34 VarDecl: Type ID LEFTBRACKET • Expr RIGHTBRACKET SEMICOLON

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 60


State 51

   40 Expr: Expr • PLUS Expr
   40     | Expr PLUS Expr •
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr

    MULTIPLY  shift, and go to state 40
    DIVIDE    shift, and go to state 41

    $default  reduce using rule 40 (Expr)


State 52

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   41     | Expr MINUS Expr •
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr

    MULTIPLY  shift, and go to state 40
    DIVIDE    shift, and go to state 41

    $default  reduce using rule 41 (Expr)


State 53

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   42     | Expr MULTIPLY Expr •
   43     | Expr • DIVIDE Expr

    $default  reduce using rule 42 (Expr)


State 54

   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr
   43     | Expr DIVIDE Expr •

    $default  reduce using rule 43 (Expr)


State 55

   22 Param: Type ID • COMMA Param
   23      | Type ID •

    COMMA  shift, and go to state 61

    $default  reduce using rule 23 (Param)


State 56

   26 FunCall: ID LEFTPARENTHESIS Param RIGHTPARENTHESIS •

    $default  reduce using rule 26 (FunCall)


State 57

   37 Expr: ID LEFTBRACKET Expr RIGHTBRACKET •
   39     | ID LEFTBRACKET Expr RIGHTBRACKET • EQUAL Expr

    EQUAL  shift, and go to state 62

    $default  reduce using rule 37 (Expr)


State 58

   30 FunDecl: FUN Type ID $@1 • LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block

    LEFTPARENTHESIS  shift, and go to state 63


State 59

   33 VarDecl: Type ID EQUAL Expr • SEMICOLON
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr

    SEMICOLON  shift, and go to state 64
    PLUS       shift, and go to state 38
    MINUS      shift, and go to state 39
    MULTIPLY   shift, and go to state 40
    DIVIDE     shift, and go to state 41


State 60

   34 VarDecl: Type ID LEFTBRACKET Expr • RIGHTBRACKET SEMICOLON
   40 Expr: Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr

    PLUS          shift, and go to state 38
    MINUS         shift, and go to state 39
    MULTIPLY      shift, and go to state 40
    DIVIDE        shift, and go to state 41
    RIGHTBRACKET  shift, and go to state 65


State 61

   22 Param: Type ID COMMA • Param

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    $default  reduce using rule 24 (Param)

    Type   go to state 43
    Param  go to state 66


State 62

   39 Expr: ID LEFTBRACKET Expr RIGHTBRACKET EQUAL • Expr

    ID               shift, and go to state 27
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    Expr  go to state 67


State 63

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS • ParamList RIGHTPARENTHESIS $@2 Block

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    $default  reduce using rule 19 (ParamList)

    Type       go to state 68
    ParamList  go to state 69


State 64

   33 VarDecl: Type ID EQUAL Expr SEMICOLON •

    $default  reduce using rule 33 (VarDecl)


State 65

   34 VarDecl: Type ID LEFTBRACKET Expr RIGHTBRACKET • SEMICOLON

    SEMICOLON  shift, and go to state 70


State 66

   22 Param: Type ID COMMA Param •

    $default  reduce using rule 22 (Param)


State 67

   39 Expr: ID LEFTBRACKET Expr RIGHTBRACKET EQUAL Expr •
   40     | Expr • PLUS Expr
   41     | Expr • MINUS Expr
   42     | Expr • MULTIPLY Expr
   43     | Expr • DIVIDE Expr

    PLUS      shift, and go to state 38
    MINUS     shift, and go to state 39
    MULTIPLY  shift, and go to state 40
    DIVIDE    shift, and go to state 41

    PLUS      [reduce using rule 39 (Expr)]
    MINUS     [reduce using rule 39 (Expr)]
    MULTIPLY  [reduce using rule 39 (Expr)]
    DIVIDE    [reduce using rule 39 (Expr)]
    $default  reduce using rule 39 (Expr)


State 68

   20 ParamList: Type • ID COMMA ParamList
   21          | Type • ID

    ID  shift, and go to state 71


State 69

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList • RIGHTPARENTHESIS $@2 Block

    RIGHTPARENTHESIS  shift, and go to state 72


State 70

   34 VarDecl: Type ID LEFTBRACKET Expr RIGHTBRACKET SEMICOLON •

    $default  reduce using rule 34 (VarDecl)


State 71

   20 ParamList: Type ID • COMMA ParamList
   21          | Type ID •

    COMMA  shift, and go to state 73

    $default  reduce using rule 21 (ParamList)


State 72

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS • $@2 Block

    $default  reduce using rule 29 ($@2)

    $@2  go to state 74


State 73

   20 ParamList: Type ID COMMA • ParamList

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    CHAR    shift, and go to state 3
    BOOL    shift, and go to state 4
    STRING  shift, and go to state 5
    VOID    shift, and go to state 6

    $default  reduce using rule 19 (ParamList)

    Type       go to state 68
    ParamList  go to state 75


State 74

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 • Block

    LEFTCURLYBRACKET  shift, and go to state 76

    Block  go to state 77


State 75

   20 ParamList: Type ID COMMA ParamList •

    $default  reduce using rule 20 (ParamList)


State 76

   31 Block: LEFTCURLYBRACKET • DeclList StmtList RIGHCURLYBRACKET

    INT              shift, and go to state 1
    FLOAT            shift, and go to state 2
    CHAR             shift, and go to state 3
    BOOL             shift, and go to state 4
    STRING           shift, and go to state 5
    VOID             shift, and go to state 6
    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11
    FUN              shift, and go to state 12

    INT              [reduce using rule 7 (StmtList)]
    FLOAT            [reduce using rule 7 (StmtList)]
    CHAR             [reduce using rule 7 (StmtList)]
    BOOL             [reduce using rule 7 (StmtList)]
    STRING           [reduce using rule 7 (StmtList)]
    VOID             [reduce using rule 7 (StmtList)]
    ID               [reduce using rule 7 (StmtList)]
    RETURN           [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 7 (StmtList)]
    SEMICOLON        [reduce using rule 27 (FunCall)]
    LEFTPARENTHESIS  [reduce using rule 7 (StmtList)]
    NUMBER           [reduce using rule 7 (StmtList)]
    FUN              [reduce using rule 7 (StmtList)]
    $default         reduce using rule 7 (StmtList)

    DeclList    go to state 78
    Decl        go to state 15
    StmtList    go to state 16
    Stmt        go to state 17
    Type        go to state 18
    ReturnStmt  go to state 19
    FunCall     go to state 20
    FunDecl     go to state 21
    VarDecl     go to state 22
    Expr        go to state 23


State 77

   30 FunDecl: FUN Type ID $@1 LEFTPARENTHESIS ParamList RIGHTPARENTHESIS $@2 Block •

    $default  reduce using rule 30 (FunDecl)


State 78

   31 Block: LEFTCURLYBRACKET DeclList • StmtList RIGHCURLYBRACKET

    ID               shift, and go to state 7
    RETURN           shift, and go to state 8
    SEMICOLON        shift, and go to state 9
    LEFTPARENTHESIS  shift, and go to state 10
    NUMBER           shift, and go to state 11

    SEMICOLON  [reduce using rule 27 (FunCall)]
    $default   reduce using rule 7 (StmtList)

    StmtList    go to state 79
    Stmt        go to state 17
    ReturnStmt  go to state 19
    FunCall     go to state 20
    Expr        go to state 23


State 79

   31 Block: LEFTCURLYBRACKET DeclList StmtList • RIGHCURLYBRACKET

    RIGHCURLYBRACKET  shift, and go to state 80


State 80

   31 Block: LEFTCURLYBRACKET DeclList StmtList RIGHCURLYBRACKET •

    $default  reduce using rule 31 (Block)
